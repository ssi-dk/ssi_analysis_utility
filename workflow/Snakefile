from pprint import pprint # devpkg for printing objects
import pandas as pd
import os
import yaml
from scripts import convert_external_genome
import warnings
import math

configfile: "config/config.yaml"

# Read the CSV file
CSV = config['input_manager']['path']
CSV_DATA = pd.read_csv(CSV, sep='\t')

# Path to species specific configuration files
SPECIES_PATH = config['input_manager']['config_species']

# Setup output folder
OUT_FOLDER = config['input_manager']['out_folder']

# Use the sample names as wildcards
SAMPLES = CSV_DATA['sample_name'].tolist()

# Create a dictionary for mapping sampleID to file paths
sample_to_illumina = {row['sample_name']: row['Illumina_read_files'].split(',') for idx, row in CSV_DATA.iterrows()}
sample_to_nanopore = {row['sample_name']: row['Nanopore_read_file'] for idx, row in CSV_DATA.iterrows()}
sample_to_assembly_file = {row['sample_name']: row['assembly_file'] for idx, row in CSV_DATA.iterrows()}

species_name_map = {
    "Clostridioides difficile": "C.diff",
    "Clostridium difficile": "C.diff",
    "C. difficile": "C.diff",
    "C difficile": "C.diff",
    "C. diff": "C.diff",
    "C.diff": "C.diff",
    "Escherichia coli": "E.coli",
    "E coli": "E.coli",
    "E.coli": "E.coli",
    # Add more mappings here
}

sample_to_organism = {
    row['sample_name']: species_name_map.get(row['organism'], row['organism'])
    for idx, row in CSV_DATA.iterrows()
}

#sample_to_organism = {row['sample_name']: row['organism'] for idx, row in CSV_DATA.iterrows()}

# Load species-specific configurations dynamically
species_configs = {}
for species in set(sample_to_organism.values()):
    species_config_path = SPECIES_PATH + f"{species}.yaml"
    if os.path.exists(species_config_path):
        with open(species_config_path, "r") as species_config_file:
            species_configs[species] = yaml.load(species_config_file, 
                                                 Loader=yaml.Loader)
    else: # means the config is not found / available
        warnings.warn(f"Warning: Configuration file {species_config_path} not found. \
                        Skipping analyses for {species}.", UserWarning)
        species_configs[species] = {}  # Empty config to ensure skipping analyses


database_path = config['input_manager']['database_path']

### Define rules where samtools is necessary

TOOLS_WITH_SAM_OUTPUT = ["Cdiff_KMA_Toxin"]
ASM_TO_REPEAT_IDENTIFICATION = ["spades","skesa"]

# ------------------ BAM BAI targets generated automatically ------------------

bam_bai_targets = expand(
    "{folder}/{sample}/FilteredBAM/{sample}.{tool}.filtered.sorted.bam.bai",
    folder=OUT_FOLDER,
    sample=[
        s for s in SAMPLES
        for tool in TOOLS_WITH_SAM_OUTPUT
        if species_configs[sample_to_organism[s]]["analyses_to_run"][tool]["status"] is True
        and species_configs[sample_to_organism[s]]["analyses_to_run"]["samtools_idx"]["status"] is True
    ],
    tool=TOOLS_WITH_SAM_OUTPUT
)

# ------------------ BCF Index (.bcf.csi) Targets ------------------ #

bcf_csi_targets = expand(
    "{folder}/{sample}/GenotypeCalls/{sample}.{tool}.{tag}.bcf.csi",
    folder=OUT_FOLDER,
    sample=[
        s for s in SAMPLES
        for tool in TOOLS_WITH_SAM_OUTPUT
        if species_configs[sample_to_organism[s]]["analyses_to_run"][tool]["status"] is True
        and species_configs[sample_to_organism[s]]["analyses_to_run"]["bcftools_index"]["status"] is True
    ],
    tool=TOOLS_WITH_SAM_OUTPUT,
    tag=["calls", "indels"]  #this enables indexing of all bcf files
)
##############################################################################
#
#                              Snakefile 
#
##############################################################################

# Define the dynamic input for rule all
rule all:
    input:
        expand(
            "%s/{sample}/kmeraligner/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["kmeraligner"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/Cdiff_KMA_Toxin/{sample}.sam" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["Cdiff_KMA_Toxin"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/KMA_results/{sample}_KMA.tsv" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES
                if "KMA_filter" in species_configs[sample_to_organism[s]]["analyses_to_run"] and
                species_configs[sample_to_organism[s]]["analyses_to_run"]["KMA_filter"].get("status", False)
            ]
        ),
        expand(
            "%s/{sample}/emm_typing/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["emm_typing"]["status"] is True
            ]
        ),       
        expand(
            "%s/{sample}/assembly_lineage/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["assembly_lineage_determination"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/PlasmidFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["plasmidfinder"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/ResFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["resfinder"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/VirulenceFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["virulencefinder"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/lre-finder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["LRE-finder"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/SerotypeFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["serotypefinder"]["status"] is True
            ]
        ),
        expand(
            "{out}/{sample}/AMRFinder", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["amrfinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/MLST", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["mlst"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "%s/{sample}/spades/contigs.fasta" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["spades"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/skesa/{sample}.contigs.fasta" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["skesa"]["status"] is True
            ]
        ),
        expand(
            "%s/{sample}/Repeat_identifier/{assembler}_{sample}_repeat.tsv" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES for assembler in ASM_TO_REPEAT_IDENTIFICATION
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["Repeat_identifier"]["status"] is True
                and species_configs[sample_to_organism[s]]["analyses_to_run"][assembler]["status"] is True
            ], # creates a list of samples needed to match with each assembly -> e.g ["SRR1", "SRR1", "SRR2", "SRR2"]
            assembler=[
                assembler for s in SAMPLES for assembler in ASM_TO_REPEAT_IDENTIFICATION
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["Repeat_identifier"]["status"] is True
                and species_configs[sample_to_organism[s]]["analyses_to_run"][assembler]["status"] is True
            ] # creates a list of assembly tools needed to match with each sample -> e.g ["spades", "skesa","spades", "skesa"]Â to create all combinations of samples and assembly tools
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.calls.bcf" % OUT_FOLDER,
            sample=[s for s in SAMPLES for tool in TOOLS_WITH_SAM_OUTPUT
                    if species_configs[sample_to_organism[s]]["analyses_to_run"][tool]["status"] is True],
            tool=TOOLS_WITH_SAM_OUTPUT
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.indels.bcf" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["bcftools_view_filter"]["status"] is True
            ],
            tool=TOOLS_WITH_SAM_OUTPUT
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.variants.tsv" % OUT_FOLDER,
            sample=[
                s for s in SAMPLES
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["Variant_detection"]["status"] is True
            ],
            tool=TOOLS_WITH_SAM_OUTPUT
        ),
        bam_bai_targets,
        bcf_csi_targets  # dynamically include all BCF CSI indexes

include : "rules/db_setups.smk"
include : "rules/finders.smk"
include : "rules/characterizers.smk"
include : "rules/others.smk"