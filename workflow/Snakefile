from Snakefile_info import (
    load_inputs,
    load_species_configs,
    is_tool_enabled,
    Tools_with_sam_output,
    Assembly_tools
)

configfile: "config/config.yaml"

CSV_DATA, SAMPLES, sample_to_illumina, sample_to_nanopore, sample_to_assembly_file, sample_to_organism, output_folder, database_path = load_inputs(config)

species_configs = load_species_configs(config['input_manager']['config_species'], sample_to_organism)

is_enabled = lambda s, t: is_tool_enabled(s, t, sample_to_organism, species_configs) #lambda automatically supplies sample_to_organism and species_config so by supplying sample and tool it will check the species config to see if it should be run

##############################################################################
#
#                              Snakefile 
#
##############################################################################

# Define the dynamic input for rule all
rule all:
    input:
        expand(
            "%s/{sample}/kmeraligner/{sample}.res" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "kmeraligner")]
        ),
        expand(
            "%s/{sample}/KMA_results/{sample}_KMA.tsv" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "KMA_filter")]
        ),
        expand(
            "%s/{sample}/spades/contigs.fasta" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "spades")]
        ),
        expand(
            "%s/{sample}/skesa/{sample}.contigs.fasta" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "skesa")]
        ),
        expand(
            "%s/{sample}/PlasmidFinder/" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "plasmidfinder")]
        ),
        expand(
            "%s/{sample}/ResFinder/" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "resfinder")]
        ),
        expand(
            "%s/{sample}/VirulenceFinder/" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "virulencefinder")]
        ),
        expand(
            "%s/{sample}/SerotypeFinder/" % output_folder,
            sample=[s for s in SAMPLES if is_enabled(s, "serotypefinder")]
        ),
        expand(
            "%s/{sample}/AMRFinder/AMR_{assembler}_{sample}.tsv" % output_folder,
            sample=[
                s for s in SAMPLES for assembler in Assembly_tools
                if is_enabled(s, "amrfinder") and is_enabled(s, assembler)
            ],
            assembler=[
                assembler for s in SAMPLES for assembler in Assembly_tools
                if is_enabled(s, "amrfinder") and is_enabled(s, assembler)
            ]
        ),
        expand(
            "%s/{sample}/Repeat_identifier/{assembler}_{sample}_repeat.tsv" % output_folder,
            sample=[
                s for s in SAMPLES for assembler in Assembly_tools
                if is_enabled(s, "Repeat_identifier") and is_enabled(s, assembler)
            ],
            assembler=[
                assembler for s in SAMPLES for assembler in Assembly_tools
                if is_enabled(s, "Repeat_identifier") and is_enabled(s, assembler)
            ]
        ),
        expand(
            "%s/{sample}/FilteredBAM/{sample}.{tool}.filtered.sorted.bam.bai" % output_folder,
            sample=[
                s for s in SAMPLES
                for tool in Tools_with_sam_output
                if is_enabled(s, tool) and is_enabled(s, "samtools_idx")
            ],
            tool=Tools_with_sam_output
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.{tag}.bcf.csi" % output_folder,
            sample=[
                s for s in SAMPLES
                for tool in Tools_with_sam_output
                if is_enabled(s, tool) and is_enabled(s, "bcftools_index")
            ],
            tool=Tools_with_sam_output,
            tag=["calls", "indels"]
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.calls.bcf" % output_folder,
            sample=[
                s for s in SAMPLES
                for tool in Tools_with_sam_output
                if is_enabled(s, tool) and is_enabled(s, "bcftools_call")
            ],
            tool=Tools_with_sam_output
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.indels.bcf" % output_folder,
            sample=[
                s for s in SAMPLES
                for tool in Tools_with_sam_output
                if is_enabled(s, tool) and is_enabled(s, "bcftools_view_filter")
            ],
            tool=Tools_with_sam_output
        ),
        expand(
            "%s/{sample}/GenotypeCalls/{sample}.{tool}.variants.tsv" % output_folder,
            sample=[
                s for s in SAMPLES
                for tool in Tools_with_sam_output
                if is_enabled(s, tool) and is_enabled(s, "Variant_detection")
            ],
            tool=Tools_with_sam_output
        ),

include : "rules/db_setups.smk"
include : "rules/finders.smk"
include : "rules/characterizers.smk"
include : "rules/others.smk"
include : "rules/Cdiff.smk"