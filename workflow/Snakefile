import pandas as pd
import os
import yaml
from scripts import convert_external_genome
import warnings

configfile: "config/config.yaml"

# Read the CSV file
CSV = config['input_manager']['path']
CSV_DATA = pd.read_csv(CSV, sep='\t')

# Path to species specific configuration files
SPECIES_PATH = config['input_manager']['config_species']

############ Example TSV format ################:
# sample_name     Illumina_read_files     Nanopore_read_file      ...  ...       variant notes
# GAS-2022-1029   GAS-2022-1029_S42_L555_R1_001.fastq.gz,GAS-2022-1029_S42_L555_R2_001.fastq.gz   GAS-2022-1029_nanopore.fastq.gz GAS-2022-1029.fasta  

# Setup output folder
OUT_FOLDER = config['input_manager']['out_folder']

# Use the sample names as wildcards
SAMPLES = CSV_DATA['sample_name'].tolist()

# Create a dictionary for mapping sampleID to file paths
sample_to_illumina = {row['sample_name']: row['Illumina_read_files'].split(',') for idx, row in CSV_DATA.iterrows()}
sample_to_nanopore = {row['sample_name']: row['Nanopore_read_file'] for idx, row in CSV_DATA.iterrows()}
sample_to_assembly_file = {row['sample_name']: row['assembly_file'] for idx, row in CSV_DATA.iterrows()}
sample_to_organism = {row['sample_name']: row['organism'] for idx, row in CSV_DATA.iterrows()}


# Load species-specific configurations dynamically
species_configs = {}
for species in set(sample_to_organism.values()):
    species_config_path = SPECIES_PATH + f"{species}.yaml"
    if os.path.exists(species_config_path):
        with open(species_config_path, "r") as species_config_file:
            species_configs[species] = yaml.load(species_config_file, 
                                                 Loader=yaml.Loader)
    else: # means the config is not found / available
        warnings.warn(f"Warning: Configuration file {species_config_path} not found. \
                        Skipping analyses for {species}.", UserWarning)
        species_configs[species] = {}  # Empty config to ensure skipping analyses

       



##############################################################################
#
#                              Snakefile 
#
##############################################################################

# Define the dynamic input for rule all
rule all:
    input:
        expand(
            "{out}/{sample}/kma/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["kmeraligner"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/emm_typing/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["emm_typing"]["status"] is True
            ],
            out=OUT_FOLDER
        ),       
        expand(
            "{out}/{sample}/blast/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["resistance_gene_detection"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/assembly_lineage/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["assembly_lineage_determination"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/plasmidfinder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["plasmidfinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/resfinder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["resfinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/virulencefinder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["virulencefinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/lre-finder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["LRE-finder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/serotypefinder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["serotypefinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/kleborate/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["kleborate"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/chtyper/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["CHtyper"]["status"] is True
            ],
            out=OUT_FOLDER
        ),
        # expand(
        #     "{out}/{sample}/kmerfinder/", 
        #     sample=[
        #         s for s in SAMPLES 
        #         if species_configs[sample_to_organism[s]]["analyses_to_run"]["kmerfinder"]["status"] is True
        #     ],
        #     out=OUT_FOLDER
        # ),
        expand(
            "{out}/{sample}/cgmlstfinder/", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["cgMLSTFinder"]["status"] is True
            ],
            out=OUT_FOLDER
        ),




include : "rules/finders.smk"
include : "rules/others.smk"
    


