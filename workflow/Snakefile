from pprint import pprint # devpkg for printing objects
import pandas as pd
import os
import yaml
from scripts import convert_external_genome
import warnings
import math

configfile: "config/config.yaml"

# Read the CSV file
CSV = config['input_manager']['path']
CSV_DATA = pd.read_csv(CSV, sep='\t')

# Path to species specific configuration files
SPECIES_PATH = config['input_manager']['config_species']

# Setup output folder
OUT_FOLDER = config['input_manager']['out_folder']

# Use the sample names as wildcards
SAMPLES = CSV_DATA['sample_name'].tolist()

# Create a dictionary for mapping sampleID to file paths
sample_to_illumina = {row['sample_name']: row['Illumina_read_files'].split(',') for idx, row in CSV_DATA.iterrows()}
sample_to_nanopore = {row['sample_name']: row['Nanopore_read_file'] for idx, row in CSV_DATA.iterrows()}
sample_to_assembly_file = {row['sample_name']: row['assembly_file'] for idx, row in CSV_DATA.iterrows()}
sample_to_organism = {row['sample_name']: row['organism'] for idx, row in CSV_DATA.iterrows()}

# Load species-specific configurations dynamically
species_configs = {}
for species in set(sample_to_organism.values()):
    species_config_path = SPECIES_PATH + f"{species}.yaml"
    if os.path.exists(species_config_path):
        with open(species_config_path, "r") as species_config_file:
            species_configs[species] = yaml.load(species_config_file, 
                                                 Loader=yaml.Loader)
    else: # means the config is not found / available
        warnings.warn(f"Warning: Configuration file {species_config_path} not found. \
                        Skipping analyses for {species}.", UserWarning)
        species_configs[species] = {}  # Empty config to ensure skipping analyses


database_path = config['input_manager']['database_path']


##############################################################################
#
#                              Snakefile 
#
##############################################################################

# Define the dynamic input for rule all
rule all:
    input:
        expand(
            "%s/{sample}/kmeraligner/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "kmeraligner" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/emm_typing/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "emm_typing" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),       
        expand(
            "%s/{sample}/assembly_lineage/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "assembly_lineage_determination" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/PlasmidFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "plasmidfinder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/ResFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "resfinder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/VirulenceFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "virulencefinder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/lre-finder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "LRE-finder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "%s/{sample}/SerotypeFinder/" %OUT_FOLDER, 
            sample=[
                s for s in SAMPLES 
                if "serotypefinder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ]
        ),
        expand(
            "{out}/{sample}/AMRFinder", 
            sample=[
                s for s in SAMPLES 
                if "amrfinder" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/MLST", 
            sample=[
                s for s in SAMPLES 
                if "mlst" in species_configs[sample_to_organism[s]]["analyses_to_run"]
            ],
            out=OUT_FOLDER
        ),
        expand(
            "{out}/{sample}/meningotype", 
            sample=[
                s for s in SAMPLES 
                if species_configs[sample_to_organism[s]]["analyses_to_run"]["meningotype"]["status"] is True
            ],
            out=OUT_FOLDER
        ),

include : "rules/db_setups.smk"
include : "rules/finders.smk"
include : "rules/assemblers.smk"
include : "rules/characterizers.smk"
include : "rules/others.smk"


